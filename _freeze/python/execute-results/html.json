{
  "hash": "839c1fbe313ad98fd36e85d15fe5c930",
  "result": {
    "markdown": "# Python Refreshment\n\n\nYou have programmed in Python. Regardless of your skill level, let us\ndo some refreshing.\n\n## The Python World\n\n+ Function: a block of organized, reusable code to complete certain\n  task.\n+ Module: a file containing a collection of functions, variables, and\n  statements.\n+ Package: a structured directory containing collections of modules\n  and an `__init.py__` file by which the directory is interpreted as a\n  package.\n+ Library: a collection of related functionality of codes. It is a\n  reusable chunk of code that we can use by importing it in our\n  program, we can just use it by importing that library and calling\n  the method of that library with period(.).\n\nSee, for example, [how to build a Python\nlibratry](https://medium.com/analytics-vidhya/how-to-create-a-python-library-7d5aea80cc3f).\n\n\n## Standard Library\n\nPython’s has an extensive standard library that offers a wide range of\nfacilities as indicated by the long table of contents listed below. \nSee documentation [online](https://docs.python.org/3/library/).\n\n> The library contains built-in modules (written in C) that provide access to\n> system functionality such as file I/O that would otherwise be inaccessible to\n> Python programmers, as well as modules written in Python that provide\n> standardized solutions for many problems that occur in everyday\n> programming. Some of these modules are explicitly designed to encourage and\n> enhance the portability of Python programs by abstracting away\n> platform-specifics into platform-neutral APIs.\n\n\nQuestion: How to get the constant $e$ to an arbitary precision?\n\nThe constant is only represented by a given double precision.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport math\nprint(\"%0.20f\" % math.e)\nprint(\"%0.80f\" % math.e)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2.71828182845904509080\n2.71828182845904509079559829842764884233474731445312500000000000000000000000000000\n```\n:::\n:::\n\n\nNow use package `decimal` to export with an arbitary precision.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport decimal  # for what?\n\n## set the required number digits to 150\ndecimal.getcontext().prec = 150\ndecimal.Decimal(1).exp().to_eng_string()\ndecimal.Decimal(1).exp().to_eng_string()[2:]\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n'71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642742746639193200305992181741359662904357290033429526'\n```\n:::\n:::\n\n\n## Important Libraries\n\n+ NumPy\n+ pandas\n+ matplotlib\n+ IPython/Jupyter\n+ SciPy\n+ scikit-learn\n+ statsmodels\n\nQuestion: how to draw a random sample from a normal distribution and\nevaluate the density and distributions at these points?\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nfrom scipy.stats import norm\n\nmu, sigma = 2, 4\nmean, var, skew, kurt = norm.stats(mu, sigma, moments='mvsk')\nprint(mean, var, skew, kurt)\nx = norm.rvs(loc = mu, scale = sigma, size = 10)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2.0 16.0 0.0 0.0\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\narray([ 2.72196447,  9.65656679,  4.83440318,  1.55503353,  0.09462407,\n        3.97780864,  3.94449156, -2.83903522, -6.83658372, -3.95816022])\n```\n:::\n:::\n\n\nThe pdf and cdf can be evaluated:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nnorm.pdf(x, loc = mu, scale = sigma)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\narray([0.09812418, 0.01596746, 0.07759204, 0.09912038, 0.08903865,\n       0.08825946, 0.08862063, 0.04797904, 0.00869162, 0.03288964])\n```\n:::\n:::\n\n\n## Writing a Function\n\nConsider the Fibonacci Sequence\n$1, 1, 2, 3, 5, 8, 13, 21, 34, ...$.\nThe next number is found by adding up the two numbers before it.\nWe are going to use 3 ways to solve the problems.\n\n\nThe first is a recursive solution.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndef fib_rs(n):\n    if (n==1 or n==2):\n        return 1\n    else:\n        return fib_rs(n - 1) + fib_rs(n - 2)\n\n%timeit fib_rs(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n14 µs ± 680 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n```\n:::\n:::\n\n\nThe second uses dynamic programming memoization.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndef fib_dm_helper(n, mem):\n    if mem[n] is not None:\n        return mem[n]\n    elif (n == 1 or n == 2):\n        result = 1\n    else:\n        result = fib_dm_helper(n - 1, mem) + fib_dm_helper(n - 2, mem)\n    mem[n] = result\n    return result\n\ndef fib_dm(n):\n    mem = [None] * (n + 1)\n    return fib_dm_helper(n, mem)\n\n%timeit fib_dm(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3.38 µs ± 58.4 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n```\n:::\n:::\n\n\nThe third is still dynamic programming but bottom-up.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndef fib_dbu(n):\n    mem = [None] * (n + 1)\n    mem[1]=1;\n    mem[2]=1;\n    for i in range(3,n+1):\n        mem[i] = mem[i-1] + mem[i-2]\n    return mem[n]\n\n\n%timeit fib_dbu(500)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n103 µs ± 12 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n```\n:::\n:::\n\n\nApparently, the three solutions have very different performance for\nlarger `n`.\n\n\n## Variables versus Objects\n\nIn Python, variables and the objects they point to actually live in\ntwo different places in the computer memory. Think of variables as\npointers to the objects they’re associated with, rather than being\nthose objects. This matters when multiple variables point to the same\nobject.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nx = [1, 2, 3]  # create a list; x points to the list\ny = x          # y also points to the same list in the memory\ny.append(4)    # append to y\nx              # x changed!\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n[1, 2, 3, 4]\n```\n:::\n:::\n\n\nNow check their addresses\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nprint(id(x))   # address of x\nprint(id(y))   # address of y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n140607470231808\n140607470231808\n```\n:::\n:::\n\n\nNonetheless, some data types in Python are \"immutable\", meaning that\ntheir values cannot be changed in place. One such example is strings.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nx = \"abc\"\ny = x\ny = \"xyz\"\nx\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n'abc'\n```\n:::\n:::\n\n\nNow check their addresses\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nprint(id(x))   # address of x\nprint(id(y))   # address of y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n140607357509552\n140607436093296\n```\n:::\n:::\n\n\nQuestion: What's mutable and what's immutable?\n\nAnything that is a collection of other objects is mutable, except\n``tuples``.\n\nNot all manipulations of mutable objects change the object rather than\ncreate a new object. Sometimes when you do something to a mutable\nobject, you get back a new object. Manipulations that change an\nexisting object, rather than create a new one, are referred to as\n“in-place mutations” or just “mutations.” So:\n\n+ __All__ manipulations of immutable types create new objects.\n+ __Some__ manipulations of mutable types create new objects.\n\nDifferent variables may all be pointing at the same object is\npreserved through function calls (a behavior known as “pass by\nobject-reference”). So if you pass a list to a function, and that\nfunction manipulates that list using an in-place mutation, that change\nwill affect any variable that was pointing to that same object outside\nthe function.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nx = [1, 2, 3]\ny = x\n\ndef append_42(input_list):\n    input_list.append(42)\n    return input_list\n\nappend_42(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n[1, 2, 3, 42]\n```\n:::\n:::\n\n\nNote that both `x` and `y` have been appended by $42$.\n\n",
    "supporting": [
      "python_files"
    ],
    "filters": [],
    "includes": {}
  }
}